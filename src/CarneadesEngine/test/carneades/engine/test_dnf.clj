;;; Copyright Â© 2010-2012 Fraunhofer Gesellschaft
;;; Licensed under the EUPL V.1.1

(ns carneades.engine.test-dnf
  (:use clojure.test)
  (:require [midje.sweet :refer :all]
            [carneades.engine.dnf :refer :all]))

(def f0 'a)
(def f1 '(not a))
(def f2 '(not a b))
(def f3 '(not (and a b)))
(def f4 '(and (not a) b))
(def f5 '(or a b))
(def f6 '(or a (and b c)))
(def f7 '(or a (and (not b) c)))
(def f8 '(and a (and b c)))
(def f9 '(or (not a) (and a b) (and c d)))
(def f10 '(or a b c (not d)))
(def f11 '(or a b c (not (and a b))))
(def f12 '(or (not (not a)) (not (and (not b) (not c))) (not (and a b))))
(def f13 '(not (and a (assuming b) (unless c) (or d (assuming e)))))
(def f14 '(and a b
                   (and c (or d (or (assuming f) g)) h)
                   (or (not (and (unless i) j (and (not k) l))) m)))
(def f15 '(if (and a (or b (iff c d))) e))
(def f16 '(or (and a (if b (and c d))) e))
(def f17 '(or (and a (or b (and c d))) e))
(def f18 '(iff (and a (or b (if c d))) e))

(fact "The atom predicates works."
      (expect (atom? f0) => true)
      (expect (atom? f1) => false)
      (expect (atom? f2) => false)
      (expect (atom? f3) => false)
      (expect (atom? f4) => false)
      (expect (atom? f5) => false)
      (expect (atom? f6) => false)
      (expect (atom? f7) => false)
      (expect (atom? f8) => false)
      (expect (atom? f9) => false)
      (expect (atom? f10) => false)
      (expect (atom? f11) => false)
      (expect (atom? f12) => false)
      (expect (atom? f13) => false)
      (expect (atom? f14) => false)
      (expect (atom? f15) => false)
      (expect (atom? f16) => false)
      (expect (atom? f17) => false)
      (expect (atom? f18) => false))

(fact "The literal predicates works."
      (expect (literal? f0) => true)
      (expect (literal? f1) => true)
      (expect (literal? f2) => false)
      (expect (literal? f3) => false)
      (expect (literal? f4) => false)
      (expect (literal? f5) => false)
      (expect (literal? f6) => false)
      (expect (literal? f7) => false)
      (expect (literal? f8) => false)
      (expect (literal? f9) => false)
      (expect (literal? f10) => false)
      (expect (literal? f11) => false)
      (expect (literal? f12) => false)
      (expect (literal? f13) => false)
      (expect (literal? f14) => false)
      (expect (literal? f15) => false)
      (expect (literal? f16) => false)
      (expect (literal? f17) => false)
      (expect (literal? f18) => false))

(fact "The extliteral predicates works."
      (expect (extliteral? f0) => true)
      (expect (extliteral? f1) => true)
      (expect (extliteral? f2) => false)
      (expect (extliteral? f3) => false)
      (expect (extliteral? f4) => false)
      (expect (extliteral? f5) => false)
      (expect (extliteral? f6) => false)
      (expect (extliteral? f7) => false)
      (expect (extliteral? f8) => false)
      (expect (extliteral? f9) => false)
      (expect (extliteral? f10) => false)
      (expect (extliteral? f11) => false)
      (expect (extliteral? f12) => false)
      (expect (extliteral? f13) => false)
      (expect (extliteral? f14) => false)
      (expect (extliteral? f15) => false)
      (expect (extliteral? f16) => false)
      (expect (extliteral? f16) => false))

(fact "The negation predicates works."
  (expect (negation? f0) => false)
  (expect (negation? f1) => true)
  (expect (negation? f2) => false)
  (expect (negation? f3) => true)
  (expect (negation? f4) => false)
  (expect (negation? f5) => false)
  (expect (negation? f6) => false)
  (expect (negation? f7) => false)
  (expect (negation? f8) => false)
  (expect (negation? f9) => false)
  (expect (negation? f10) => false)
  (expect (negation? f11) => false)
  (expect (negation? f12) => false)
  (expect (negation? f13) => true)
  (expect (negation? f14) => false)
  (expect (negation? f15) => false)
  (expect (negation? f16) => false)
  (expect (negation? f17) => false)
  (expect (negation? f18) => false))

(fact "The conjunction predicates works."
  (expect (conjunction? f0) => false)
  (expect (conjunction? f1) => false)
  (expect (conjunction? f2) => false)
  (expect (conjunction? f3) => false)
  (expect (conjunction? f4) => true)
  (expect (conjunction? f5) => false)
  (expect (conjunction? f6) => false)
  (expect (conjunction? f7) => false)
  (expect (conjunction? f8) => true)
  (expect (conjunction? f9) => false)
  (expect (conjunction? f10) => false)
  (expect (conjunction? f11) => false)
  (expect (conjunction? f12) => false)
  (expect (conjunction? f13) => false)
  (expect (conjunction? f14) => true)
  (expect (conjunction? f15) => false)
  (expect (conjunction? f16) => false)
  (expect (conjunction? f17) => false)
  (expect (conjunction? f18) => false))

(fact "The lconjunction predicates works."
      (expect (lconjunction? f0) => true)
      (expect (lconjunction? f1) => true)
      (expect (lconjunction? f2) => false)
      (expect (lconjunction? f3) => false)
      (expect (lconjunction? f4) => true)
      (expect (lconjunction? f5) => false)
      (expect (lconjunction? f6) => false)
      (expect (lconjunction? f7) => false)
      (expect (lconjunction? f8) => false)
      (expect (lconjunction? f9) => false)
      (expect (lconjunction? f10) => false)
      (expect (lconjunction? f11) => false)
      (expect (lconjunction? f12) => false)
      (expect (lconjunction? f13) => false)
      (expect (lconjunction? f14) => false)
      (expect (lconjunction? f15) => false)
      (expect (lconjunction? f16) => false)
      (expect (lconjunction? f17) => false)
      (expect (lconjunction? f18) => false))

(fact "The disjunction predicates works."
      (expect (disjunction? f0) => false)
      (expect (disjunction? f1) => false)
      (expect (disjunction? f2) => false)
      (expect (disjunction? f3) => false)
      (expect (disjunction? f4) => false)
      (expect (disjunction? f5) => true)
      (expect (disjunction? f6) => true)
      (expect (disjunction? f7) => true)
      (expect (disjunction? f8) => false)
      (expect (disjunction? f9) => true)
      (expect (disjunction? f10) => true)
      (expect (disjunction? f11) => true)
      (expect (disjunction? f12) => true)
      (expect (disjunction? f13) => false)
      (expect (disjunction? f14) => false)
      (expect (disjunction? f15) => false)
      (expect (disjunction? f16) => true)
      (expect (disjunction? f17) => true)
      (expect (disjunction? f18) => false))

(fact "The implication? predicates works."
      (expect (implication? f0) => false)
      (expect (implication? f1) => false)
      (expect (implication? f2) => false)
      (expect (implication? f3) => false)
      (expect (implication? f4) => false)
      (expect (implication? f5) => false)
      (expect (implication? f6) => false)
      (expect (implication? f7) => false)
      (expect (implication? f8) => false)
      (expect (implication? f9) => false)
      (expect (implication? f10) => false)
      (expect (implication? f11) => false)
      (expect (implication? f12) => false)
      (expect (implication? f13) => false)
      (expect (implication? f14) => false)
      (expect (implication? f15) => true)
      (expect (implication? f16) => false)
      (expect (implication? f17) => false)
      (expect (implication? f18) => false))

(fact "The equivalence? predicates works."
      (expect (equivalence? f0) => false)
      (expect (equivalence? f1) => false)
      (expect (equivalence? f2) => false)
      (expect (equivalence? f3) => false)
      (expect (equivalence? f4) => false)
      (expect (equivalence? f5) => false)
      (expect (equivalence? f6) => false)
      (expect (equivalence? f7) => false)
      (expect (equivalence? f8) => false)
      (expect (equivalence? f9) => false)
      (expect (equivalence? f10) => false)
      (expect (equivalence? f11) => false)
      (expect (equivalence? f12) => false)
      (expect (equivalence? f13) => false)
      (expect (equivalence? f14) => false)
      (expect (equivalence? f15) => false)
      (expect (equivalence? f16) => false)
      (expect (equivalence? f17) => false)
      (expect (equivalence? f18) => true))

(fact "The dnf? predicates works."
      (expect (dnf? f0) => true)
      (expect (dnf? f1) => true)
      (expect (dnf? f2) => false)
      (expect (dnf? f3) => false)
      (expect (dnf? f4) => true)
      (expect (dnf? f5) => true)
      (expect (dnf? f6) => true)
      (expect (dnf? f7) => true)
      (expect (dnf? f8) => false)
      (expect (dnf? f9) => true)
      (expect (dnf? f10) => true)
      (expect (dnf? f11) => false)
      (expect (dnf? f12) => false)
      (expect (dnf? f13) => false)
      (expect (dnf? f14) => false)
      (expect (dnf? f15) => false)
      (expect (dnf? f16) => false)
      (expect (dnf? f17) => false)
      (expect (dnf? f18) => false))

(fact "The formula? predicates works."
      (expect (formula? f0) => true)
      (expect (formula? f1) => true)
      (expect (formula? f2) => false)
      (expect (formula? f3) => true)
      (expect (formula? f4) => true)
      (expect (formula? f5) => true)
      (expect (formula? f6) => true)
      (expect (formula? f7) => true)
      (expect (formula? f8) => true)
      (expect (formula? f9) => true)
      (expect (formula? f10) => true)
      (expect (formula? f11) => true)
      (expect (formula? f12) => true)
      (expect (formula? f13) => true)
      (expect (formula? f14) => true)
      (expect (formula? f15) => true)
      (expect (formula? f16) => true)
      (expect (formula? f17) => true)
      (expect (formula? f18) => true))

(fact "The distri function works"
      (expect (distri '(a b c) '(or d e f)) =>
              '(or (and d a b c)
                   (and e a b c)
                   (and f a b c))))

(fact "The con-flatten function works"
      (expect (con-flatten '((and a b) (and b (and (or cc dd) d) d) (or d e))) =>
              '(a b b (or cc dd) d d (or d e))))

(fact "The to-dnf function works."
      (expect  (to-dnf f0) => 'a)
      (expect  (to-dnf f1) => '(not a))
      (expect  (to-dnf f3) => '(or (not a) (not b)))
      (expect  (to-dnf f4) => '(and (not a) b))
      (expect  (to-dnf f5) => '(or a b))
      (expect  (to-dnf f6) => '(or a (and b c)))
      (expect  (to-dnf f7) => '(or a (and (not b) c)))
      (expect  (to-dnf f8) => '(and a b c))
      (expect  (to-dnf f9) => '(or (not a) (and a b) (and c d)))
      (expect  (to-dnf f10) => '(or a b c (not d)))
      (expect  (to-dnf f11) => '(or a b c (not a) (not b)))
      (expect  (to-dnf f12) => '(or a b c (not a) (not b)))
      (expect  (to-dnf f13) => '(or (not a) (assuming (not b)) (unless (not c))
                                    (and (not d) (assuming (not e)))))
      (expect (to-dnf f14) => '(or
                                (and (unless (not i)) d (a b c h))
                                (and (not j) d (a b c h))
                                (and k d (a b c h))
                                (and (not l) d (a b c h))
                                (and m d (a b c h))
                                (and (unless (not i)) (assuming f) (a b c h))
                                (and (not j) (assuming f) (a b c h))
                                (and k (assuming f) (a b c h))
                                (and (not l) (assuming f) (a b c h))
                                (and m (assuming f) (a b c h))
                                (and (unless (not i)) g (a b c h))
                                (and (not j) g (a b c h))
                                (and k g (a b c h))
                                (and (not l) g (a b c h))
                                (and m g (a b c h))))
      (expect (to-dnf f15) => '(or (not a) (and c (not d) (not b))
                                     (and d (not c) (not b)) e))
      (expect  (to-dnf f16) => '(or (and (not b) a) (and c d a) e))
      (expect  (to-dnf f17) => '(or (and b a) (and c d a) e))
      (expect  (to-dnf f18) => '(or
                                 (and (not a) ()
                                      (or (not e) (or (and b a)
                                                      (and (not c) a)
                                                      (and d a))))
                                 (and (and (not b) c (not d)) () (or (not e)
                                                                     (or (and b a)
                                                                         (and (not c) a)
                                                                         (and d a))))
                                 (and e () (or (not e) (or (and b a) (and (not c) a)
                                                           (and d a)))))))
